Name: Tycho OSGi Source Plugin
Description: A plugin for packing source on OSGi bundles
Group Id: org.eclipse.tycho
Artifact Id: tycho-source-plugin
Version: 2.3.0
Goal Prefix: tycho-source

This plugin has 2 goals:

tycho-source:feature-source
  Description: Generates a source feature for projects of packaging type
    eclipse-feature. By default, the generated source feature
    - Declares feature id <originalFeatureId>.source
    - Declares feature label '<originalFeatureLabel> Developer Resources'
    - If present, reuses feature provider, description, copyright and license
      as well as respective URLs from <originalFeature>
    - Includes all plugins included by <originalFeature>, but each with .source
      appended to each plugin id
    - Includes all features included by <originalFeature>, but each with
      .source appended to each feature id
    - Includes the original feature. This ensures that binaries and
      corresponding sources match.
    Source feature generation can be customized by adding files under path
    sourceTemplateFeature/. Files added here will be added to the root of the
    source feature jar. Especially, if file
    sourceTemplateFeature/feature.properties is found, values in this file
    override values of respective keys in <originalFeature>/feature.properties.
  Implementation: org.eclipse.tycho.source.SourceFeatureMojo
  Language: java
  Bound to phase: package

  Available parameters:

    archive
      (no description available)

    brandingPlugin
      Use this to explicitly set the branding plugin attribute of the generated
      source feature (overrides reuseBrandingPlugin).

    excludes
      Bundles and features that do not have corresponding sources. Example:
      <excludes>
       <plugin id='plugin.nosource'/>
       <feature id='feature.nosource'/>
      </excludes>

    finalName
      User property: project.build.finalName
      The filename to be used for the generated archive file. For the
      source-feature goal, '-sources-feature' is appended to this filename.

    includeBinaryFeature (Default: true)
      Whether to add an include dependency from the source feature to the
      corresponding binary feature. If true, this ensures the version of the
      installed sources matches the binaries.

    labelSuffix (Default: Developer Resources)
      Source feature label suffix. Unless explicitly provided in
      sourceTemplateFeature/feature.properties, this suffix will be appended to
      the original feature label to construct the source feature label.

    missingSourcesAction (Default: WARN)
      (no description available)

    plugins
      Additional plugins to include in the generated source feature. Beware
      that these additional plugins are not considered during build target
      platform calculation and ordering of reactor projects. Use
      <extraRequirements> dependency resolver configuration to guarantee proper
      reactor build order.
      WARNING This experimental parameter may be removed from future
      source-feature mojo versions without prior notice.

    reuseBrandingPlugin (Default: true)
      Whether to reuse an explicit branding plugin from the binary feature for
      the generated source feature.

    skip (Default: false)
      Whether to skip source feature generation.

    useDefaultExcludes (Default: true)
      (no description available)

tycho-source:plugin-source
  Description: Goal to create a JAR-package containing all the source files
    of a osgi project.
  Implementation: org.eclipse.tycho.source.OsgiSourceMojo
  Language: java
  Bound to phase: prepare-package

  Available parameters:

    additionalFileSets
      Additional files to be included in the source bundle jar. This can be
      used when src.includes in build.properties is not flexible enough , e.g.
      for files which would otherwise conflict with files in bin.includes
      Example:
      
      <additionalFileSets>
       <fileSet>
       <directory>${project.basedir}/sourceIncludes/</directory>
       <includes>
       <include>**/*</include>
       </includes>
       </fileSet>
      </additionalFileSets>

    archive
      The archive configuration to use. See Maven Archiver Reference.

    attach (Default: true)
      User property: attach
      Specifies whether or not to attach the artifact to the project

    classifier (Default: sources)
      The source bundles classifier. The name of the source bundle will be
      finalName- classifier.jar

    distinctSourceRoots (Default: false)
      Whether sources for nested jars should be put into distinct source root
      folders inside the source jar (one source root per nested jar). E.g. if
      this paramater is true and there is a nested jar named foo.jar, all of
      its sources will go into folder foosrc/. Otherwise all sources for all
      jars, nested or not, will go into the root of the source jar (this is the
      default as it provides interoperability with maven source jars).

    excludeResources (Default: false)
      User property: source.excludeResources
      Specifies whether or not to exclude resources from the sources-jar. This
      can be convenient if your project includes large resources, such as
      images, and you don't want to include them in the sources-jar.

    excludes
      List of files to exclude. Specified as fileset patterns which are
      relative to the input directory whose contents is being packaged into the
      JAR.

    finalName
      User property: project.build.finalName
      The filename to be used for the generated archive file. For the
      source:jar goal, '-sources' is appended to this filename. For the
      source:test-jar goal, '-test-sources' is appended.

    forceCreation (Default: false)
      User property: source.forceCreation
      NOT SUPPORTED. Whether creating the archive should be forced. If set to
      true, the jar will always be created. If set to false, the jar will only
      be created when the sources are newer than the jar.

    includePom (Default: false)
      User property: source.includePom
      Specifies whether or not to include the POM file in the sources-jar.

    includes
      List of files to include. Specified as fileset patterns which are
      relative to the input directory whose contents is being packaged into the
      JAR.

    outputDirectory
      User property: project.build.directory
      The directory where the generated archive file will be put.

    qualifier
      User property: buildQualifier
      Build qualifier. Recommended way to set this parameter is using
      build-qualifier goal. Only used when creating a source bundle.

    sourceBundle (Default: true)
      Whether the source jar should be an Eclipse source bundle.

    sourceBundleSuffix (Default: .source)
      User property: sourceBundleSuffix
      The suffix to be added to the symbolic name of the bundle to construct
      the symbolic name of the Eclipse source bundle.

    strictSrcIncludes (Default: true)
      If set to true (the default), missing build.properties src.includes will
      cause build failure. If set to false, missing build.properties
      src.includes will be reported as warnings but the build will not fail.

    useDefaultExcludes (Default: true)
      Exclude commonly excluded files such as SCM configuration. These are
      defined in the plexus FileUtils.getDefaultExcludes()

    useDefaultManifestFile (Default: false)
      Set this to true to enable the use of the defaultManifestFile.

    useDefaultSourceExcludes (Default: true)
      Whether default source excludes for SCM files defined in
      AbstractScanner#DEFAULTEXCLUDES should be used.
