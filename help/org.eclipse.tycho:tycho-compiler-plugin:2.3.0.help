Name: Tycho OSGi Compiler Plugin
Description: A plugin for compiling OSGi bundles
Group Id: org.eclipse.tycho
Artifact Id: tycho-compiler-plugin
Version: 2.3.0
Goal Prefix: tycho-compiler

This plugin has 1 goal:

tycho-compiler:compile
  Description: Compiles application sources with eclipse plugin dependencies
  Implementation: org.eclipse.tycho.compiler.OsgiCompilerMojo
  Language: java
  Bound to phase: compile

  Available parameters:

    annotationProcessors
      Qualified class names of annotation processors to run. If specified, the
      normal processor discovery process will be skipped. This parameter
      requires a 1.6 VM or above and is used only if the compliance is 1.6

    compilerArgs
      Arguments to be passed to the compiler.

    compilerArgument
      Unformatted argument string to be passed to the compiler if fork is set
      to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.

    compilerArguments
      Arguments to be passed to the compiler (prepending a dash) if fork is set
      to true.
      
      This is because the list of valid arguments passed to a Java compiler
      varies based on the compiler version.
      Deprecated. use {@link #compilerArgs} instead.

    compilerId (Default: jdt)
      User property: maven.compiler.compilerId
      The compiler id of the compiler to use.

    compilerVersion
      User property: maven.compiler.compilerVersion
      Version of the compiler to use, ex. '1.3', '1.5', if fork is set to true

    copyResources (Default: true)
      Whether all resources in the source folders should be copied to
      ${project.build.outputDirectory}. true (default) means that all resources
      are copied from the source folders to ${project.build.outputDirectory}.
      false means that no resources are copied from the source folders to
      ${project.build.outputDirectory}. Set this to false in case you want to
      keep resources separate from java files in src/main/resources and handle
      them using maven-resources-plugin (e.g. for resource filtering.

    debug (Default: true)
      User property: maven.compiler.debug
      Whether to include debugging information in the compiled class files. The
      default value is true.

    deriveReleaseCompilerArgumentFromTargetLevel (Default: true)
      Whether the -release argument for the Java compiler should be derived
      from the target level. Enabled by default.
      Disabling this can be useful in situations where compiling using -release
      cannot be used, e.g. when referencing internal JDK classes exported via
      an OSGI framework extension. In that case <release> should also be
      explicitly set to an empty value to prevent it from being inherited.

    encoding
      User property: project.build.sourceEncoding
      The -encoding argument for the Java compiler

    excludeResources
      A list of exclusion filters for non-java resource files which should not
      be copied to the output directory.

    excludes
      A list of exclusion filters for the compiler.

    executable
      User property: maven.compiler.executable
      The executable of the compiler to use when fork is true.

    extraClasspathElements
      Transitively add specified maven artifacts to compile classpath in
      addition to elements calculated according to OSGi rules. All packages
      from additional entries will be accessible at compile time. Useful when
      OSGi runtime classpath contains elements not defined using normal
      dependency mechanisms. For example, when Eclipse Equinox is started from
      application server with -Dosgi.parentClassloader=fwk parameter.

    failOnWarning (Default: false)
      User property: maven.compiler.failOnWarning
      Fail on warnings

    fork (Default: false)
      Allows running the compiler in a separate process. If 'false' it uses the
      built in compiler, while if 'true' it will use an executable.

    generatedSourcesDirectory (Default:
    ${project.build.directory}/generated-sources/annotations)
      The directory where source files generated by annotation processors will
      be created. This parameter requires a 1.6 VM or above and is used only if
      the compliance is 1.6.

    includes
      A list of inclusion filters for the compiler.

    log
      The format of the compiler log file. plain will log into a plain text
      file (.log), xml will log in xml format (.xml). If omitted, no logging
      into files is done. The log file name is derived from the jar file name:
      Example:
      build.properties:
      
      output.lib1/library.jar = lib1bin/
      output.lib2/library.jar = lib2bin/
      output.. = bin/
      
      And a configuration:
      
      <configuration>
       <logEnabled>true</logEnabled>
       <logDirectory>${project.build.directory}/logfiles</logDirectory>
       <log>xml</log>
      </configuration>
      
      Will produce the following log files
      
      ${project.build.directory}/logfiles/@dot.xml
      ${project.build.directory}/logfiles/lib1_library.jar.xml
      ${project.build.directory}/logfiles/lib2_library.jar.xml

    logDirectory (Default: ${project.build.directory}/compile-logs)
      The directory where the compiler log files should be placed. For each
      output jar a log file will be created and stored in this directory.
      Logging into files is only enabled if log is specified. Default:
      ${project.build.directory}/compile-logs

    maxmem
      User property: maven.compiler.maxmem
      maximum size, in megabytes, of the memory allocation pool, ex. '128',
      '128m' if fork is set to true

    meminitial
      User property: maven.compiler.meminitial
      Initial size, in megabytes, of the memory allocation pool, ex. '64',
      '64m' if fork is set to true

    optimize (Default: false)
      User property: maven.compiler.optimize
      Optimize compiled code using the compiler's optimization methods

    outputFileName
      User property: project.build.finalName
      Used to control the name of the output file when compiling a set of
      sources to a single file.

    proc
      If only is specified, the annotation processors will run but no
      compilation will be performed. If none is specified, annotation
      processors will not be discovered or run; compilation will proceed as if
      no annotation processors were found. By default the compiler must search
      the classpath for annotation processors, so specifying none may speed
      compilation if annotation processing is not required. This parameter
      requires a 1.6 VM or above and is used only if the compliance is 1.6

    release
      User property: maven.compiler.release
      The -release argument for the Java compiler

    requireJREPackageImports (Default: false)
      Whether a bundle is required to explicitly import non-java.* packages
      from the JDK. This is the design-time equivalent to the equinox runtime
      option osgi.compatibility.bootdelegation.

    showDeprecation (Default: false)
      User property: maven.compiler.showDeprecation
      Output source locations where deprecated APIs are used

    showWarnings (Default: false)
      User property: maven.compiler.showWarnings
      Output warnings

    source
      User property: maven.compiler.source
      The -source argument for the Java compiler

    staleMillis (Default: 0)
      User property: lastModGranularityMs
      The granularity in milliseconds of the last modification date for testing
      whether a source needs recompilation

    strictCompilerTarget (Default: false)
      If set to false (the default) issue a warning if effective compiler
      target level is incompatible with bundle minimal execution environment.
      If set to true will fail the build if effective compiler target and
      minimal BREE are incompatible.

    target
      User property: maven.compiler.target
      The -target argument for the Java compiler

    useJDK (Default: SYSTEM)
      Which JDK to use for compilation. Default value is SYSTEM which means the
      currently running JDK. If BREE is specified, MANIFEST header
      Bundle-RequiredExecutionEnvironment is used to define the JDK to compile
      against. In this case, you need to provide a toolchains.xml configuration
      file. The value of BREE will be matched against the id of the toolchain
      elements in toolchains.xml. Example:
      <toolchains>
       <toolchain>
       <type>jdk</type>
       <provides>
       <id>J2SE-1.5</id>
       </provides>
       <configuration>
       <jdkHome>/path/to/jdk/1.5</jdkHome>
       </configuration>
       </toolchain>
      </toolchains>
      The default value of the bootclasspath used for compilation is
      <jdkHome>/lib/*;<jdkHome>/lib/ext/*;<jdkHome>/lib/endorsed/* . For JDKs
      with different filesystem layouts, the bootclasspath can be specified
      explicitly in the configuration section. Example:
      <configuration>
       <jdkHome>/path/to/jdk/1.5</jdkHome>
       <bootClassPath>
       <includes>
       <include>jre/lib/amd64/default/jclSC160/*.jar</include>
       </includes>
       <excludes>
       <exclude>**/alt-*.jar</exclude>
       </excludes>
       </bootClassPath>
      </configuration>

    useProjectSettings (Default: true)
      If set to true, the settings file
      ${project.basedir}/.settings/org.eclipse.jdt.core.prefs will be passed to
      the compiler. If the file is not present, the build will not fail.

    verbose (Default: false)
      User property: maven.compiler.verbose
      Whether to output messages about what the compiler is doing
