Name: JaCoCo :: Maven Plugin
Description: The JaCoCo Maven Plugin provides the JaCoCo runtime agent to
  your tests and allows basic report creation.
Group Id: org.jacoco
Artifact Id: jacoco-maven-plugin
Version: 0.8.6
Goal Prefix: jacoco

This plugin has 11 goals:

jacoco:check
  Description: Checks that the code coverage metrics are being met.
  Implementation: org.jacoco.maven.CheckMojo
  Language: java
  Bound to phase: verify

  Available parameters:

    dataFile (Default: ${project.build.directory}/jacoco.exec)
      File with execution data.

    excludes
      A list of class files to exclude from analysis. May use wildcard
      characters (* and ?). When not specified nothing will be excluded.

    haltOnFailure (Default: true)
      Required: true
      User property: jacoco.haltOnFailure
      Halt the build if any of the checks fail.

    includes
      A list of class files to include into analysis. May use wildcard
      characters (* and ?). When not specified everything will be included.

    rules
      Required: true
      Check configuration used to specify rules on element types (BUNDLE,
      PACKAGE, CLASS, SOURCEFILE or METHOD) with a list of limits. Each limit
      applies to a certain counter (INSTRUCTION, LINE, BRANCH, COMPLEXITY,
      METHOD, CLASS) and defines a minimum or maximum for the corresponding
      value (TOTALCOUNT, COVEREDCOUNT, MISSEDCOUNT, COVEREDRATIO, MISSEDRATIO).
      If a limit refers to a ratio it must be in the range from 0.0 to 1.0
      where the number of decimal places will also determine the precision in
      error messages. A limit ratio may optionally be declared as a percentage
      where 0.80 and 80% represent the same value.
      
      If not specified the following defaults are assumed:
      
      - rule element: BUNDLE
      - limit counter: INSTRUCTION
      - limit value: COVEREDRATIO
      
      This example requires an overall instruction coverage of 80% and no class
      must be missed:
      
      <rules>
       <rule>
       <element>BUNDLE</element>
       <limits>
       <limit>
       <counter>INSTRUCTION</counter>
       <value>COVEREDRATIO</value>
       <minimum>0.80</minimum>
       </limit>
       <limit>
       <counter>CLASS</counter>
       <value>MISSEDCOUNT</value>
       <maximum>0</maximum>
       </limit>
       </limits>
       </rule>
      </rules>
      
      
      This example requires a line coverage minimum of 50% for every class
      except test classes:
      
      <rules>
       <rule>
       <element>CLASS</element>
       <excludes>
       <exclude>*Test</exclude>
       </excludes>
       <limits>
       <limit>
       <counter>LINE</counter>
       <value>COVEREDRATIO</value>
       <minimum>50%</minimum>
       </limit>
       </limits>
       </rule>
      </rules>

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:dump
  Description: Request a dump over TCP/IP from a JaCoCo agent running in
    tcpserver mode.
    
    Note concerning parallel builds: While the dump goal as such is thread
    safe, it has to be considered that TCP/IP server ports of the agents are a
    shared resource.
  Implementation: org.jacoco.maven.DumpMojo
  Language: java
  Bound to phase: post-integration-test

  Available parameters:

    address
      User property: jacoco.address
      IP address or hostname to connect to.

    append (Default: true)
      User property: jacoco.append
      If set to true and the execution data file already exists, coverage data
      is appended to the existing file. If set to false, an existing execution
      data file will be replaced.

    destFile (Default: ${project.build.directory}/jacoco.exec)
      User property: jacoco.destFile
      Path to the output file for execution data.

    dump (Default: true)
      User property: jacoco.dump
      Sets whether execution data should be downloaded from the remote host.

    port (Default: 6300)
      User property: jacoco.port
      Port number to connect to. If multiple JaCoCo agents should run on the
      same machine, different ports have to be specified for the agents.

    reset (Default: false)
      User property: jacoco.reset
      Sets whether a reset command should be sent after the execution data has
      been dumped.

    retryCount (Default: 10)
      User property: jacoco.retryCount
      Number of retries which the goal will attempt to establish a connection.
      This can be used to wait until the target JVM is successfully launched.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:help
  Description: Display help information on jacoco-maven-plugin.
    Call mvn jacoco:help -Ddetail=true -Dgoal=<goal-name> to display parameter
    details.
  Implementation: org.jacoco.maven.HelpMojo
  Language: java

  Available parameters:

    detail (Default: false)
      User property: detail
      If true, display all settable properties for each goal.

    goal
      User property: goal
      The name of the goal for which to show help. If unspecified, all goals
      will be displayed.

    indentSize (Default: 2)
      User property: indentSize
      The number of spaces per indentation level, should be positive.

    lineLength (Default: 80)
      User property: lineLength
      The maximum length of a display line, should be positive.

jacoco:instrument
  Description: Performs offline instrumentation. Note that after execution of
    test you must restore original classes with help of
    'restore-instrumented-classes' goal.
    Warning: The preferred way for code coverage analysis with JaCoCo is
    on-the-fly instrumentation. Offline instrumentation has several drawbacks
    and should only be used if a specific scenario explicitly requires this
    mode. Please consult documentation about offline instrumentation before
    using this mode.
  Implementation: org.jacoco.maven.InstrumentMojo
  Language: java
  Bound to phase: process-classes

  Available parameters:

    excludes
      A list of class files to exclude from instrumentation. May use wildcard
      characters (* and ?). When not specified nothing will be excluded. Except
      for performance optimization or technical corner cases this option is
      normally not required. If you want to exclude classes from the report
      please configure the report goal accordingly.

    includes
      A list of class files to include in instrumentation. May use wildcard
      characters (* and ?). When not specified everything will be included.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:merge
  Description: Mojo for merging a set of execution data files (*.exec) into a
    single file
  Implementation: org.jacoco.maven.MergeMojo
  Language: java
  Bound to phase: generate-resources

  Available parameters:

    destFile (Default: ${project.build.directory}/jacoco.exec)
      User property: jacoco.destFile
      Path to the output file for execution data.

    fileSets
      Required: true
      This mojo accepts any number of execution data file sets.
      <fileSets>
       <fileSet>
       <directory>${project.build.directory}</directory>
       <includes>
       <include>*.exec</include>
       </includes>
       </fileSet>
      </fileSets>

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:prepare-agent
  Description: Prepares a property pointing to the JaCoCo runtime agent that
    can be passed as a VM argument to the application under test. Depending on
    the project packaging type by default a property with the following name is
    set:
    
    - tycho.testArgLine for packaging type eclipse-test-plugin and
    - argLine otherwise.
    
    If your project already defines VM arguments for test execution, be sure
    that they will include property defined by JaCoCo.
    
    One of the ways to do this in case of maven-surefire-plugin - is to use
    syntax for late property evaluation:
    
     <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-surefire-plugin</artifactId>
     <configuration>
     <argLine>@{argLine} -your -extra -arguments</argLine>
     </configuration>
     </plugin>
    
    You can define empty property to avoid JVM startup error Could not find or
    load main class @{argLine} when using late property evaluation and
    jacoco-maven-plugin not executed.
    
    Another way is to define 'argLine' as a Maven property rather than as part
    of the configuration of maven-surefire-plugin:
    
     <properties>
     <argLine>-your -extra -arguments</argLine>
     </properties>
     ...
     <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-surefire-plugin</artifactId>
     <configuration>
     <!-- no argLine here -->
     </configuration>
     </plugin>
    
    Resulting coverage information is collected during execution and by default
    written to a file when the process terminates.
  Implementation: org.jacoco.maven.AgentMojo
  Language: java
  Bound to phase: initialize

  Available parameters:

    address
      User property: jacoco.address
      IP address or hostname to bind to when the output method is tcpserver or
      connect to when the output method is tcpclient. In tcpserver mode the
      value '*' causes the agent to accept connections on any local address.

    append
      User property: jacoco.append
      If set to true and the execution data file already exists, coverage data
      is appended to the existing file. If set to false, an existing execution
      data file will be replaced.

    classDumpDir
      User property: jacoco.classDumpDir
      If a directory is specified for this parameter the JaCoCo agent dumps all
      class files it processes to the given location. This can be useful for
      debugging purposes or in case of dynamically created classes for example
      when scripting engines are used.

    destFile (Default: ${project.build.directory}/jacoco.exec)
      User property: jacoco.destFile
      Path to the output file for execution data.

    dumpOnExit
      User property: jacoco.dumpOnExit
      If set to true coverage data will be written on VM shutdown.

    exclClassLoaders
      User property: jacoco.exclClassLoaders
      A list of class loader names, that should be excluded from execution
      analysis. The list entries are separated by a colon (:) and may use
      wildcard characters (* and ?). This option might be required in case of
      special frameworks that conflict with JaCoCo code instrumentation, in
      particular class loaders that do not have access to the Java runtime
      classes.

    excludes
      A list of class names to exclude from instrumentation. May use wildcard
      characters (* and ?). When not specified nothing will be excluded. Except
      for performance optimization or technical corner cases this option is
      normally not required. If you want to exclude classes from the report
      please configure the report goal accordingly.

    inclBootstrapClasses
      User property: jacoco.inclBootstrapClasses
      Specifies whether also classes from the bootstrap classloader should be
      instrumented. Use this feature with caution, it needs heavy
      includes/excludes tuning.

    inclNoLocationClasses
      User property: jacoco.inclNoLocationClasses
      Specifies whether classes without source location should be instrumented.

    includes
      A list of class names to include in instrumentation. May use wildcard
      characters (* and ?). When not specified everything will be included.

    jmx
      User property: jacoco.jmx
      If set to true the agent exposes functionality via JMX.

    output
      User property: jacoco.output
      Output method to use for writing coverage data. Valid options are:
      - file: At VM termination execution data is written to a file.
      - tcpserver: The agent listens for incoming connections on the TCP port
        specified by the address and port. Execution data is written to this
        TCP connection.
      - tcpclient: At startup the agent connects to the TCP port specified by
        the address and port. Execution data is written to this TCP connection.
      - none: Do not produce any output.

    port
      User property: jacoco.port
      Port to bind to when the output method is tcpserver or connect to when
      the output method is tcpclient. In tcpserver mode the port must be
      available, which means that if multiple JaCoCo agents should run on the
      same machine, different ports have to be specified.

    propertyName
      User property: jacoco.propertyName
      Allows to specify property which will contains settings for JaCoCo Agent.
      If not specified, then 'argLine' would be used for 'jar' packaging and
      'tycho.testArgLine' for 'eclipse-test-plugin'.

    sessionId
      User property: jacoco.sessionId
      A session identifier that is written with the execution data. Without
      this parameter a random identifier is created by the agent.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:prepare-agent-integration
  Description: Same as prepare-agent, but provides default values suitable
    for integration-tests:
    - bound to pre-integration-test phase
    - different destFile
  Implementation: org.jacoco.maven.AgentITMojo
  Language: java
  Bound to phase: pre-integration-test

  Available parameters:

    address
      User property: jacoco.address
      IP address or hostname to bind to when the output method is tcpserver or
      connect to when the output method is tcpclient. In tcpserver mode the
      value '*' causes the agent to accept connections on any local address.

    append
      User property: jacoco.append
      If set to true and the execution data file already exists, coverage data
      is appended to the existing file. If set to false, an existing execution
      data file will be replaced.

    classDumpDir
      User property: jacoco.classDumpDir
      If a directory is specified for this parameter the JaCoCo agent dumps all
      class files it processes to the given location. This can be useful for
      debugging purposes or in case of dynamically created classes for example
      when scripting engines are used.

    destFile (Default: ${project.build.directory}/jacoco-it.exec)
      User property: jacoco.destFile
      Path to the output file for execution data.

    dumpOnExit
      User property: jacoco.dumpOnExit
      If set to true coverage data will be written on VM shutdown.

    exclClassLoaders
      User property: jacoco.exclClassLoaders
      A list of class loader names, that should be excluded from execution
      analysis. The list entries are separated by a colon (:) and may use
      wildcard characters (* and ?). This option might be required in case of
      special frameworks that conflict with JaCoCo code instrumentation, in
      particular class loaders that do not have access to the Java runtime
      classes.

    excludes
      A list of class names to exclude from instrumentation. May use wildcard
      characters (* and ?). When not specified nothing will be excluded. Except
      for performance optimization or technical corner cases this option is
      normally not required. If you want to exclude classes from the report
      please configure the report goal accordingly.

    inclBootstrapClasses
      User property: jacoco.inclBootstrapClasses
      Specifies whether also classes from the bootstrap classloader should be
      instrumented. Use this feature with caution, it needs heavy
      includes/excludes tuning.

    inclNoLocationClasses
      User property: jacoco.inclNoLocationClasses
      Specifies whether classes without source location should be instrumented.

    includes
      A list of class names to include in instrumentation. May use wildcard
      characters (* and ?). When not specified everything will be included.

    jmx
      User property: jacoco.jmx
      If set to true the agent exposes functionality via JMX.

    output
      User property: jacoco.output
      Output method to use for writing coverage data. Valid options are:
      - file: At VM termination execution data is written to a file.
      - tcpserver: The agent listens for incoming connections on the TCP port
        specified by the address and port. Execution data is written to this
        TCP connection.
      - tcpclient: At startup the agent connects to the TCP port specified by
        the address and port. Execution data is written to this TCP connection.
      - none: Do not produce any output.

    port
      User property: jacoco.port
      Port to bind to when the output method is tcpserver or connect to when
      the output method is tcpclient. In tcpserver mode the port must be
      available, which means that if multiple JaCoCo agents should run on the
      same machine, different ports have to be specified.

    propertyName
      User property: jacoco.propertyName
      Allows to specify property which will contains settings for JaCoCo Agent.
      If not specified, then 'argLine' would be used for 'jar' packaging and
      'tycho.testArgLine' for 'eclipse-test-plugin'.

    sessionId
      User property: jacoco.sessionId
      A session identifier that is written with the execution data. Without
      this parameter a random identifier is created by the agent.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

jacoco:report
  Description: Creates a code coverage report for tests of a single project
    in multiple formats (HTML, XML, and CSV).
  Note: This goal should be used as a Maven report.
  Implementation: org.jacoco.maven.ReportMojo
  Language: java
  Bound to phase: verify

  Available parameters:

    dataFile (Default: ${project.build.directory}/jacoco.exec)
      User property: jacoco.dataFile
      File with execution data.

    excludes
      A list of class files to exclude from the report. May use wildcard
      characters (* and ?). When not specified nothing will be excluded.

    footer
      Footer text used in HTML report pages.

    includes
      A list of class files to include in the report. May use wildcard
      characters (* and ?). When not specified everything will be included.

    outputDirectory (Default: ${project.reporting.outputDirectory}/jacoco)
      Output directory for the reports. Note that this parameter is only
      relevant if the goal is run from the command line or from the default
      build lifecycle. If the goal is run indirectly as part of a site
      generation, the output directory configured in the Maven Site Plugin is
      used instead.

    outputEncoding (Default: UTF-8)
      User property: project.reporting.outputEncoding
      Encoding of the generated reports.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

    sourceEncoding (Default: UTF-8)
      User property: project.build.sourceEncoding
      Encoding of the source files.

    title (Default: ${project.name})
      Name of the root node HTML report pages.

jacoco:report-aggregate
  Description: Creates a structured code coverage report (HTML, XML, and CSV)
    from multiple projects within reactor. The report is created from all
    modules this project depends on. From those projects class and source files
    as well as JaCoCo execution data files will be collected. In addition
    execution data is collected from the project itself. This also allows to
    create coverage reports when tests are in separate projects than the code
    under test, for example in case of integration tests.
    
    Using the dependency scope allows to distinguish projects which contribute
    execution data but should not become part of the report:
    
    - compile, runtime, provided: Project source and execution data is included
      in the report.
    - test: Only execution data is considered for the report.
  Note: This goal should be used as a Maven report.
  Implementation: org.jacoco.maven.ReportAggregateMojo
  Language: java

  Available parameters:

    dataFileExcludes
      A list of execution data files to exclude from the report. May use
      wildcard characters (* and ?). When not specified nothing will be
      excluded.

    dataFileIncludes
      A list of execution data files to include in the report from each
      project. May use wildcard characters (* and ?). When not specified all
      *.exec files from the target folder will be included.

    excludes
      A list of class files to exclude from the report. May use wildcard
      characters (* and ?). When not specified nothing will be excluded.

    footer
      Footer text used in HTML report pages.

    includes
      A list of class files to include in the report. May use wildcard
      characters (* and ?). When not specified everything will be included.

    outputDirectory (Default:
    ${project.reporting.outputDirectory}/jacoco-aggregate)
      Output directory for the reports. Note that this parameter is only
      relevant if the goal is run from the command line or from the default
      build lifecycle. If the goal is run indirectly as part of a site
      generation, the output directory configured in the Maven Site Plugin is
      used instead.

    outputEncoding (Default: UTF-8)
      User property: project.reporting.outputEncoding
      Encoding of the generated reports.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

    sourceEncoding (Default: UTF-8)
      User property: project.build.sourceEncoding
      Encoding of the source files.

    title (Default: ${project.name})
      Name of the root node HTML report pages.

jacoco:report-integration
  Description: Same as report, but provides default values suitable for
    integration-tests:
    - bound to report-integration phase
    - different dataFile
  Note: This goal should be used as a Maven report.
  Implementation: org.jacoco.maven.ReportITMojo
  Language: java
  Bound to phase: verify

  Available parameters:

    dataFile (Default: ${project.build.directory}/jacoco-it.exec)
      File with execution data.

    excludes
      A list of class files to exclude from the report. May use wildcard
      characters (* and ?). When not specified nothing will be excluded.

    footer
      Footer text used in HTML report pages.

    includes
      A list of class files to include in the report. May use wildcard
      characters (* and ?). When not specified everything will be included.

    outputDirectory (Default: ${project.reporting.outputDirectory}/jacoco-it)
      Output directory for the reports. Note that this parameter is only
      relevant if the goal is run from the command line or from the default
      build lifecycle. If the goal is run indirectly as part of a site
      generation, the output directory configured in the Maven Site Plugin is
      used instead.

    outputEncoding (Default: UTF-8)
      User property: project.reporting.outputEncoding
      Encoding of the generated reports.

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.

    sourceEncoding (Default: UTF-8)
      User property: project.build.sourceEncoding
      Encoding of the source files.

    title (Default: ${project.name})
      Name of the root node HTML report pages.

jacoco:restore-instrumented-classes
  Description: Restores original classes as they were before offline
    instrumentation.
  Implementation: org.jacoco.maven.RestoreMojo
  Language: java
  Bound to phase: prepare-package

  Available parameters:

    skip (Default: false)
      User property: jacoco.skip
      Flag used to suppress execution.
